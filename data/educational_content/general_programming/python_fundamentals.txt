# Python Programming Fundamentals

## Core Concepts and Best Practices

Python is designed to be readable and intuitive, but understanding its core concepts deeply will make you a more effective programmer.

### Variables and Data Types

**Variable Assignment and Naming**
```python
# Good variable names are descriptive
student_count = 25
user_email = "student@university.edu"
is_logged_in = True

# Avoid cryptic names
n = 25  # What does 'n' represent?
x = "student@university.edu"  # What kind of data is 'x'?
```

**Python's Dynamic Typing**
Python variables don't have fixed types, but understanding types is crucial:
```python
# Variables can change type
data = 42          # int
data = "Hello"     # now string
data = [1, 2, 3]   # now list

# Check types when needed
if isinstance(data, list):
    print(f"List has {len(data)} elements")
```

**Fundamental Data Types**

**Numbers:**
```python
# Integers
count = 10
negative = -5

# Floats
price = 19.99
scientific = 1.23e-4  # Scientific notation

# Operations to remember
division = 10 / 3      # 3.333... (float division)
floor_division = 10 // 3  # 3 (integer division)
modulo = 10 % 3        # 1 (remainder)
```

**Strings:**
```python
# String creation
name = "Alice"
message = 'Hello, world!'
multiline = """This is a
multiline string"""

# Common string operations
upper_name = name.upper()        # "ALICE"
is_alpha = name.isalpha()        # True
parts = "a,b,c".split(",")       # ["a", "b", "c"]
joined = "-".join(["x", "y"])    # "x-y"

# String formatting (modern approach)
age = 25
formatted = f"My name is {name} and I am {age} years old"
```

### Collections: Lists, Tuples, and Dictionaries

**Lists (Mutable Sequences)**
```python
# Creating and modifying lists
fruits = ["apple", "banana", "orange"]
fruits.append("grape")           # Add to end
fruits.insert(1, "kiwi")        # Insert at position
removed = fruits.pop()          # Remove and return last item

# List comprehensions (Pythonic way to create lists)
squares = [x**2 for x in range(1, 6)]     # [1, 4, 9, 16, 25]
evens = [x for x in range(10) if x % 2 == 0]  # [0, 2, 4, 6, 8]
```

**Tuples (Immutable Sequences)**
```python
# Coordinates, database records, function returns
point = (3, 4)
rgb_color = (255, 128, 0)

# Unpacking
x, y = point  # x=3, y=4
r, g, b = rgb_color

# Named tuples for clarity
from collections import namedtuple
Point = namedtuple('Point', ['x', 'y'])
p = Point(3, 4)
print(p.x, p.y)  # More readable than p[0], p[1]
```

**Dictionaries (Key-Value Pairs)**
```python
# Creating dictionaries
student = {
    "name": "Alice",
    "age": 20,
    "grades": [85, 92, 78]
}

# Accessing and modifying
name = student["name"]                    # Access value
student["email"] = "alice@school.edu"    # Add new key
age = student.get("age", 0)              # Safe access with default

# Dictionary comprehensions
word_lengths = {word: len(word) for word in ["hello", "world", "python"]}
```

### Control Flow

**Conditional Statements**
```python
# Basic if-elif-else
score = 85
if score >= 90:
    grade = "A"
elif score >= 80:
    grade = "B"
elif score >= 70:
    grade = "C"
else:
    grade = "F"

# Pythonic conditional assignment
status = "pass" if score >= 60 else "fail"

# Testing multiple conditions
if 80 <= score <= 90:  # Pythonic range check
    print("Good job!")
```

**Loops**
```python
# For loops with different iterables
for number in range(5):           # 0, 1, 2, 3, 4
    print(number)

for char in "hello":              # h, e, l, l, o
    print(char)

for fruit in ["apple", "banana"]: # apple, banana
    print(fruit)

# Enumerate when you need indices
for index, value in enumerate(["a", "b", "c"]):
    print(f"Index {index}: {value}")

# While loops
count = 0
while count < 5:
    print(count)
    count += 1  # Don't forget to update the condition!
```

### Functions

**Function Definition and Best Practices**
```python
def calculate_average(numbers):
    """
    Calculate the average of a list of numbers.
    
    Args:
        numbers: List of numeric values
        
    Returns:
        Float representing the average, or None if list is empty
    """
    if not numbers:  # Handle edge case
        return None
    
    return sum(numbers) / len(numbers)

# Function with default parameters
def greet(name, greeting="Hello"):
    return f"{greeting}, {name}!"

# Multiple return values using tuples
def get_name_and_age():
    return "Alice", 25

name, age = get_name_and_age()  # Unpacking
```

**Variable Scope**
```python
# Global vs local scope
global_var = "I'm global"

def demo_scope():
    local_var = "I'm local"
    print(global_var)  # Can access global
    # print(local_var) outside function would cause error

# Modifying global variables (use sparingly)
counter = 0

def increment():
    global counter
    counter += 1
```

### Error Handling

**Try-Except Blocks**
```python
def safe_divide(a, b):
    try:
        result = a / b
        return result
    except ZeroDivisionError:
        print("Cannot divide by zero")
        return None
    except TypeError:
        print("Both arguments must be numbers")
        return None

# Multiple exceptions
def process_data(data):
    try:
        # Risky operations
        result = int(data) * 2
        return result
    except (ValueError, TypeError) as e:
        print(f"Error processing data: {e}")
        return 0
    finally:
        print("Cleanup operations")  # Always runs
```

### File Operations

**Reading and Writing Files**
```python
# Reading files (safe way with context manager)
try:
    with open("data.txt", "r") as file:
        content = file.read()
        lines = content.splitlines()
except FileNotFoundError:
    print("File not found")

# Writing files
data = ["line1", "line2", "line3"]
with open("output.txt", "w") as file:
    for line in data:
        file.write(line + "\n")

# Or more simply:
with open("output.txt", "w") as file:
    file.write("\n".join(data))
```

### Python Style Guidelines (PEP 8)

**Naming Conventions:**
- Variables and functions: `snake_case`
- Classes: `PascalCase`
- Constants: `ALL_CAPS`

**Code Layout:**
- 4 spaces for indentation (not tabs)
- Maximum line length: 79 characters
- Blank lines around functions and classes

**Import Organization:**
```python
# Standard library imports first
import os
import sys

# Third-party imports second
import requests
import numpy as np

# Local application imports last
from myproject import mymodule
```

### Common Python Idioms

**List Operations:**
```python
# Checking if list is empty
if not my_list:  # Pythonic way
    print("List is empty")

# Safe list access
first_item = my_list[0] if my_list else None

# Reversing a list
reversed_list = my_list[::-1]
```

**Dictionary Operations:**
```python
# Dictionary iteration
for key, value in my_dict.items():
    print(f"{key}: {value}")

# Default values
count = word_count.get(word, 0) + 1  # Increment or start at 1
```

**Boolean Logic:**
```python
# Truthiness in Python
# False: None, False, 0, "", [], {}, set()
# True: Everything else

# Short-circuit evaluation
result = expensive_function() or default_value
user_name = input_name or "Anonymous"
```

### Debugging and Testing Your Code

**Print Debugging:**
```python
def debug_function(data):
    print(f"Function called with: {data}")
    result = process(data)
    print(f"Processing result: {result}")
    return result
```

**Assert Statements for Testing:**
```python
def test_average():
    assert calculate_average([1, 2, 3]) == 2.0
    assert calculate_average([]) is None
    assert calculate_average([5]) == 5.0
    print("All tests passed!")

test_average()
```

Remember: Python's philosophy is "readability counts." Write code that others (including future you) can easily understand and maintain.
