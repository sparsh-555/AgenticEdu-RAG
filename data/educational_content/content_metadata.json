{
  "content_organization": {
    "description": "Metadata for organizing educational content in the Agentic Edu-RAG system",
    "version": "1.0",
    "last_updated": "2024-12-19"
  },
  "content_categories": {
    "implementation_guides": {
      "agent_specialization": "implementation",
      "content_type": "implementation_guide",
      "difficulty_levels": ["beginner", "intermediate", "advanced"],
      "focus_areas": [
        "algorithm_implementation",
        "data_structure_design",
        "code_architecture",
        "best_practices",
        "planning_strategies"
      ]
    },
    "debugging_resources": {
      "agent_specialization": "debugging",
      "content_type": "debugging_resource",
      "difficulty_levels": ["beginner", "intermediate", "advanced"],
      "focus_areas": [
        "error_analysis",
        "debugging_methodology",
        "troubleshooting_techniques",
        "systematic_problem_solving",
        "code_inspection"
      ]
    },
    "general_programming": {
      "agent_specialization": "general",
      "content_type": "concept_explanation",
      "difficulty_levels": ["beginner", "intermediate", "advanced"],
      "focus_areas": [
        "programming_fundamentals",
        "language_features",
        "best_practices",
        "code_quality",
        "development_workflows"
      ]
    }
  },
  "programming_concepts": {
    "algorithms": [
      "binary_search",
      "linear_search",
      "sorting_algorithms",
      "graph_algorithms",
      "dynamic_programming",
      "recursion",
      "divide_and_conquer"
    ],
    "data_structures": [
      "arrays",
      "linked_lists",
      "stacks",
      "queues",
      "trees",
      "graphs",
      "hash_tables",
      "heaps"
    ],
    "control_flow": [
      "conditionals",
      "loops",
      "iteration",
      "branching",
      "exception_handling"
    ],
    "functions": [
      "function_definition",
      "parameters",
      "return_values",
      "scope",
      "recursion",
      "higher_order_functions"
    ],
    "object_oriented": [
      "classes",
      "objects",
      "inheritance",
      "polymorphism",
      "encapsulation",
      "abstraction"
    ],
    "error_handling": [
      "exceptions",
      "try_catch",
      "debugging",
      "error_types",
      "defensive_programming"
    ],
    "testing": [
      "unit_testing",
      "test_cases",
      "assertions",
      "test_driven_development",
      "debugging_tests"
    ]
  },
  "difficulty_progression": {
    "beginner": {
      "characteristics": [
        "Basic syntax and concepts",
        "Simple problem solving",
        "Step-by-step guidance",
        "Lots of examples",
        "Foundational knowledge"
      ],
      "learning_objectives": [
        "Understand basic programming concepts",
        "Write simple programs",
        "Debug basic errors",
        "Follow coding conventions"
      ]
    },
    "intermediate": {
      "characteristics": [
        "Complex problem solving",
        "Multiple approaches",
        "Performance considerations",
        "Design patterns",
        "Integration of concepts"
      ],
      "learning_objectives": [
        "Solve complex programming challenges",
        "Apply design patterns",
        "Optimize code performance",
        "Handle edge cases effectively"
      ]
    },
    "advanced": {
      "characteristics": [
        "System design",
        "Advanced algorithms",
        "Performance optimization",
        "Architectural decisions",
        "Research-level topics"
      ],
      "learning_objectives": [
        "Design scalable systems",
        "Implement advanced algorithms",
        "Make architectural decisions",
        "Contribute to open source projects"
      ]
    }
  },
  "srl_phase_alignment": {
    "forethought": {
      "description": "Planning and strategy development phase",
      "agent_specialization": "implementation",
      "content_focus": [
        "Problem analysis",
        "Strategy selection",
        "Implementation planning",
        "Goal setting",
        "Resource identification"
      ],
      "query_indicators": [
        "how to implement",
        "what approach",
        "best strategy",
        "planning",
        "design"
      ]
    },
    "performance": {
      "description": "Execution and monitoring phase",
      "agent_specialization": "debugging",
      "content_focus": [
        "Error resolution",
        "Code debugging",
        "Performance monitoring",
        "Problem diagnosis",
        "Systematic troubleshooting"
      ],
      "query_indicators": [
        "error",
        "bug",
        "not working",
        "debug",
        "fix"
      ]
    }
  },
  "content_quality_standards": {
    "minimum_requirements": {
      "content_length": 100,
      "educational_indicators": 2,
      "examples_included": true,
      "learning_objectives": true
    },
    "preferred_features": {
      "step_by_step_guidance": true,
      "code_examples": true,
      "common_pitfalls": true,
      "best_practices": true,
      "prerequisites_listed": true
    }
  },
  "retrieval_optimization": {
    "agent_boosting": {
      "implementation_content_types": [
        "implementation_guide",
        "algorithm_description",
        "best_practices",
        "code_example"
      ],
      "debugging_content_types": [
        "debugging_resource",
        "error_reference",
        "troubleshooting_guide",
        "systematic_methodology"
      ]
    },
    "concept_clustering": {
      "algorithms_cluster": [
        "binary_search",
        "sorting",
        "graph_traversal",
        "dynamic_programming"
      ],
      "data_structures_cluster": [
        "arrays",
        "linked_lists",
        "trees",
        "hash_tables"
      ],
      "debugging_cluster": [
        "indexerror",
        "nameerror",
        "typeerror",
        "systematic_debugging"
      ]
    }
  }
}